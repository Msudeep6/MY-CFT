---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Master stack: PathToMasterStackFile'

Parameters:

  pemkey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: select your pem key
  cidr:
    Type: String
    Default: 10.0.0.0/16
  subnetcount:
    Type: String
    Default: "4" 
  subnetmask:
    Type: String
    Default: "8"
Resources:
#creating a vpc
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Kawasaki-Dev-VPC
#creating subnets
  pubsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [0, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Kawasaki-Dev-PubSub1
  pubsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true  
      VpcId: !Ref myVPC
      CidrBlock: !Select [1, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Kawasaki-Dev-PubSub2
  privsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [2, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Kawasaki-Dev-PrivSub1
  privsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: !Select [3, !Cidr [!Ref cidr, !Ref subnetcount, !Ref subnetmask]]
      Tags:
        - Key: Name
          Value: Kawasaki-Dev-PrivSub
#creating route tables
  publicrouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Kawasaki-PublicrouteTable
  privaterouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Kawasaki-PrivaterouteTable
#creating route table association
  pubrouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsubnet1
      RouteTableId: !Ref publicrouteTable
  pubrouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubsubnet2
      RouteTableId: !Ref publicrouteTable
  privrouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsubnet1
      RouteTableId: !Ref privaterouteTable
  privrouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privsubnet2
      RouteTableId: !Ref privaterouteTable
#creating an internet gateway
  igwName:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGWName-Kawasaki
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref igwName 
#attaching igw
  igwroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicrouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igwName
#creating Eip gateway
  eip:
    Type: AWS::EC2::EIP
    Properties:
     Domain: !Ref myVPC
#creating nat gateway
  natID:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt 'eip.AllocationId' #required
      SubnetId: !Ref pubsubnet1 #required
#attacing nat gateway
  natroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privaterouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natID
  

